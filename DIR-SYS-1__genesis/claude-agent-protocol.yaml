# Claude Agent Protocol Directives
# CRITICAL: Read this file in every new session to understand agent architecture

version: "1.4"
directive_type: "agent_protocol" 
last_updated: "2025-09-06T03:05:00Z"

# CORE PRINCIPLE: Everything goes through agents
never_create_directly:
  - directories (ask AGT-STRUCT-1)
  - names (ask AGT-NAMING-1) 
  - documentation (ask AGT-SEMDOC-1)
  - code (ask AGT-CODING-1)
  - semantic analysis (ask AGT-SEMANTIC-1)
  - graph relationships (ask AGT-GRAPH-1 - when created)

# SEMANTIC NAMING PROTOCOL - UPDATED v1.2
naming_rules:
  pattern: "PROJECT.ENV.TYPE-DOMAIN-N__ULID8"
  legacy_pattern: "TYPE-DOMAIN-N__ULID8"  # for backward compatibility
  no_zero_padding: true  # CAP-AUTH-1 not CAP-AUTH-001
  
  projects:
    current: "centerfire"
    future: ["myproject", "clientname", etc.]
    
  environments:
    dev: "development/testing environment"
    test: "isolated testing with cleanup"
    prod: "production autonomous system"
    
  examples:
    agents: "centerfire.dev.AGT-NAMING-1__01K4EAF1"
    capabilities: "centerfire.prod.CAP-AUTH-2__01K4EAF3"
    documentation: "centerfire.dev.DOC-ARCH-1__genesis"
    test_concepts: "centerfire.test.CON-LOGIN-1__01K4EAF5"
    
# SEMANTIC NAMESPACE SEPARATION
namespace_implementation:
  weaviate_classes: "Project_Env_Type" # Centerfire_Dev_Concept
  neo4j_labels: "(:Project_Env_Type)" # (:Centerfire_Dev_Agent)
  redis_channels: "project.env.agent.type.request" # centerfire.dev.agent.semantic.request

# AGENT DELEGATION CHAIN
workflow:
  human_request: |
    1. Human: "Create authentication capability"
    2. Claude asks AGT-NAMING-1: allocate_capability("AUTH", "user authentication")
    3. AGT-NAMING-1 returns: CAP-AUTH-2__01K4EAF3
    4. AGT-NAMING-1 delegates to AGT-STRUCT-1: create_structure
    5. AGT-STRUCT-1 creates directories and files
    6. AGT-STRUCT-1 delegates to AGT-SEMDOC-1: create_documentation
    7. All agents report completion back to Claude
    8. Claude reports to human: "CAP-AUTH-2 ready"

# FILE NAMING SPECIFICATION
file_naming:
  semantic_files:
    specs: "FIL-SPEC-N__name.yaml"
    contracts: "FIL-CONTRACT-N__name.yaml" 
    schemas: "FIL-SCHEMA-N__name.json"
    logs: "FIL-LOG-N__YYYYMMDD.log"
    archives: "FIL-ARCHIVE-N__backup.tar.gz"
    
  standard_files:  # Keep normal naming
    source_code: ["main.go", "package.json", "index.ts", "app.py"]
    build_outputs: ["dist/", "build/", "target/"]
    temp_files: ["/tmp/*", "*.tmp", ".cache/"]
    system_files: [".git/", ".env", "Dockerfile"]

# AGENT COMMUNICATION
redis_channels:
  naming: "agent.naming.request"
  structure: "agent.struct.request" 
  coding: "agent.coding.request"
  documentation: "agent.semdoc.request"
  semantic: "agent.semantic.request"
  graph: "agent.graph.request"  # when AGT-GRAPH-1 created

# CURRENT AGENT STATUS
active_agents:
  - id: "AGT-BOOTSTRAP-1"
    status: "genesis_complete"
    location: "agents/AGT-BOOTSTRAP-1__genesis/"
    type: "ephemeral"
    
  - id: "AGT-NAMING-1" 
    status: "enhanced_with_semantic_namespace_allocation"
    location: "agents/AGT-NAMING-1__01K4EAF1/"
    capabilities: ["allocate_capability", "allocate_module", "allocate_namespace", "manage_sequences"]
    integrations: ["Redis:6380"]
    type: "persistent"
    
  - id: "AGT-STRUCT-1"
    status: "tested_working_with_redis"
    location: "agents/AGT-STRUCT-1__01K4EAF1/"
    capabilities: ["create_structure", "delegate_documentation"]
    integrations: ["Redis:6380"]
    type: "persistent"
    
  - id: "AGT-SEMANTIC-1"
    status: "updated_to_use_semantic_namespaces_from_AGT-NAMING-1"
    location: "agents/AGT-SEMANTIC-1__01K4EAF1/"
    capabilities: ["semantic_similarity", "store_concept", "query_concepts", "request_semantic_namespaces"]
    integrations: ["Redis:6380", "Weaviate:8080"]
    namespaces: ["semantic_CID_based_via_AGT-NAMING-1"]
    type: "persistent"
    
  - id: "AGT-MANAGER-1"
    status: "enhanced_with_service_dependency_tracking_and_automatic_recovery"
    location: "agents/AGT-MANAGER-1__manager1/"
    capabilities: ["singleton_enforcement", "collision_detection", "process_monitoring", "agent_registry", "ephemeral_spawning", "timeout_management", "dependency_tracking", "service_health_validation", "automatic_recovery"]
    integrations: ["Redis:6380"]
    type: "persistent"
    
  - id: "AGT-CLEANUP-1"
    status: "deployed_and_tested"
    location: "agents/AGT-CLEANUP-1__17571335/"
    capabilities: ["cleanup_weaviate_classes", "cleanup_pre_semantic_data", "direct_cleanup_mode"]
    integrations: ["Redis:6380", "Weaviate:8080", "Neo4j:7687"]
    type: "ephemeral"
    
  - id: "AGT-SEMDOC-1"
    status: "created_not_tested"
    location: "agents/AGT-SEMDOC-1__01K4EAF1/"
    type: "persistent"
    
  - id: "AGT-CODING-1"
    status: "created_not_tested"  
    location: "agents/AGT-CODING-1__01K4EAF1/"
    type: "persistent"
    
  - id: "AGT-SYSTEM-COMMANDER-1"
    status: "promoted_to_general_multi_shell_orchestration_operational"
    location: "agents/AGT-SYSTEM-COMMANDER-1__syscmd1/"
    capabilities: ["execute_command", "tmux_sessions", "direct_execution", "shell_pool", "parallel_execution", "orchestration", "contract_validation"]
    integrations: ["Redis:6380", "HTTP-Gateway:8090", "tmux:3.5a"]
    contracts: ["claude_code"]
    type: "persistent"
    
  - id: "AGT-LOCAL-LLM-1"
    status: "operational_platform_independent_ai_processing"
    location: "agents/AGT-LOCAL-LLM-1__localllm1/"
    capabilities: ["intelligent_model_selection", "resource_management", "task_routing", "file_search", "weaviate_query", "todo_update", "ollama_integration"]
    integrations: ["Redis:6380", "Ollama:11434", "HTTP-Gateway:8090"]
    models: ["codellama:13b-instruct", "mistral:7b-instruct", "llama3.1:8b"]
    contracts: ["claude_code"]
    type: "persistent"
    
  - id: "AGT-CONTEXT-1"
    status: "operational_fast_weaviate_context_retrieval"
    location: "agents/AGT-CONTEXT-1__17572052/"
    capabilities: ["search_conversations", "get_context", "search_semantic", "get_session_history", "context_retrieval", "conversation_memory"]
    integrations: ["Redis:6380", "Weaviate:8080", "HTTP-GraphQL"]
    contracts: ["personal_agent", "claude_code"]
    type: "persistent"
    
  - id: "AGT-CLAUDE-CAPTURE-1"
    status: "operational_claude_code_session_capture"
    location: "agents/AGT-CLAUDE-CAPTURE-1__0368F157/"
    capabilities: ["session_capture", "conversation_streaming", "claude_monitoring", "development_capture"]
    integrations: ["Redis:6380", "Redis-Streams"]
    language: "python"
    type: "persistent"
    
  - id: "AGT-STACK-1"
    status: "operational_container_orchestration_and_profile_management"
    location: "agents/AGT-STACK-1__stack1/"
    capabilities: ["profile_management", "container_orchestration", "ephemeral_startup", "dependency_tracking", "docker_compose_integration"]
    integrations: ["Redis:6380", "Docker", "Docker-Compose"]
    contracts: ["clickhouse_consumer", "claude_code", "personal_agent"]
    type: "persistent"

# DEVELOPMENT STATUS - AGENT MANAGEMENT + COLLISION DETECTION COMPLETE
foundation_complete:
  - "Agent ecosystem operational: AGT-NAMING-1, AGT-STRUCT-1, AGT-SEMANTIC-1, AGT-MANAGER-1"
  - "Redis pub/sub delegation chain working end-to-end" 
  - "Semantic namespacing: centerfire.dev/test/prod isolation working"
  - "Auto-read hook installed for session continuity"
  - "COMPLETE: Redis Streams → W/N pipeline operational"
  - "COMPLETE: Agent collision detection and singleton enforcement"
  - "Infrastructure cleaned: stopped unused mem0-postgres, mem0-qdrant"
  - "Session management utility: Redis-based with AGT-NAMING-1 delegation"

redis_streams_architecture_complete:
  - "AGT-NAMING-1: Publishes semantic names to centerfire:semantic:names + Redis persistence"
  - "AGT-SEMANTIC-1: DISABLED direct Weaviate writes, publishes to centerfire:semantic:concepts"
  - "Stream Processor: Dual consumer (names + concepts) → W/N forwarding"
  - "Consumer groups: wn-consumers established for both streams"
  - "End-to-end verified: concept storage flows Redis → Stream → W/N consumers"
  - "Architecture philosophy: Agents MONITOR infrastructure, streams ARE infrastructure"

agent_collision_detection_complete:
  - "AGT-MANAGER-1: Redis-based instance tracking with heartbeat monitoring"
  - "Singleton enforcement: AGT-NAMING-1, AGT-SEMANTIC-1, AGT-STRUCT-1, AGT-MANAGER-1"
  - "Instance keys: centerfire:agents:active:{agent_name} with collision prevention"
  - "Automatic cleanup: Dead instance removal via 30-second heartbeat timeout"
  - "Management commands: check_collisions, start_agent, stop_agent, restart_agent"
  - "Process monitoring: Automatic registration/unregistration on start/exit"

current_session_achievements:
  - "COMPLETE: AGT-MANAGER-1 operational with full collision detection"
  - "Singleton agent enforcement preventing duplicate instances"
  - "Multi-project architecture analysis: Smart single-agent pool recommended"
  - "COMPLETE: Semantic namespace gap closed - AGT-NAMING-1 now allocates semantic namespaces"
  - "COMPLETE: AGT-SEMANTIC-1 updated to use semantic namespaces via AGT-NAMING-1 delegation"
  - "COMPLETE: Stream processor enhanced with namespace event handling"
  - "COMPLETE: Backfill utility created and executed - historical semantic data in W/N streams"
  - "COMPLETE: AGT-CLEANUP-1 created and deployed - removed pre-semantic Weaviate classes"
  - "Agent lifecycle architecture designed: Persistent vs Ephemeral agent classification"
  - "W/N shorthand established for Weaviate/Neo4j consumer references"
  - "COMPLETE: Agent registry implemented in AGT-MANAGER-1 with 7 agent definitions"
  - "COMPLETE: Ephemeral agent spawning and lifecycle management operational"
  - "COMPLETE: Automatic timeout management and cleanup for ephemeral agents"
  - "Memory-first agent registry with persistent/ephemeral classification system"
  - "Session cleanup: Resolved duplicate background processes via session restart method"
  - "COMPLETE: HTTP Gateway dynamic port allocation and service discovery architecture"
  - "COMPLETE: AGT-MANAGER-1 HTTP service discovery endpoints on port 8380"
  - "COMPLETE: External service discovery flow - well-known endpoint solves bootstrap problem"
  - "COMPLETE: AGT-SYSTEM-COMMANDER-1 created for secure system command execution"
  - "COMPLETE: System Commander with tmux sessions, contract validation, and HTTP/Redis support"
  - "COMPLETE: Claude Code HTTP client with automatic fallback to Redis pub/sub"
  - "COMPLETE: System agent routing added to HTTP Gateway with contract authorization"
  - "Security architecture established: Command execution bypasses Claude Code restrictions via agent validation"
  - "COMPLETE: SYSTEM COMMANDER PROMOTED TO GENERAL - Multi-shell orchestration operational"
  - "Military hierarchy implemented: General→Colonel→Major→Captain command structure"
  - "Shell Pool Management: Concurrent shell allocation with purpose-based isolation (Alpha, Bravo, Charlie, Delta units)"
  - "Parallel Operations: 4 simultaneous command theaters executing in 520ms with full session isolation"
  - "tmux integration: Persistent session management with automatic cleanup and lifecycle tracking"
  - "Phase 1 Multi-Shell Architecture: Foundation complete for pexpect integration and dependency management"
  - "COMPLETE: AGT-LOCAL-LLM-1 platform-independent AI processing operational"
  - "Local LLM Integration: 3-model intelligent routing (CodeLlama 13b, Mistral 7b, Llama3.1 8b)"
  - "Smart Resource Management: Model persistence, intelligent caching, 6-19s response optimization"
  - "Task Specialization: file_search→file_analyst, weaviate_query→knowledge_curator, todo_update→workflow_manager"
  - "Contract Integration: claude_code authorized for localllm agent access via HTTP Gateway"
  - "Platform Independence Achievement: Local-first processing foundation for conversational interface"
  - "COMPLETE: AGT-CLAUDE-CAPTURE-1 operational for Claude Code session capture and streaming"
  - "Claude Code session capture: Development conversations now streaming to centerfire:semantic:conversations"
  - "Multi-language agent architecture: Python implementation for Claude Code integration alongside Go agent ecosystem"
  - "COMPLETE: 100% Redis to Weaviate pipeline success rate achieved"
  - "Conversation consumer enhanced with JSON error recovery and malformed data handling"
  - "End-to-end conversation streaming: Claude Code → AGT-CLAUDE-CAPTURE-1 → Redis → Consumer → Weaviate"
  - "COMPLETE: ClickHouse cold storage integration for massive conversation analytics"
  - "ClickHouse Container: Profile-based deployment (--profile analytics) for on-demand startup"
  - "Port optimization: ClickHouse TCP on 9001 to avoid Portainer conflicts"
  - "Smart ClickHouse Consumer: Batch processing with container awareness and auto-recovery"
  - "Cold storage architecture: Time-series partitioning, MergeTree engine for analytics queries"
  - "Ephemeral container strategy: Start ClickHouse when needed, shutdown for resource efficiency"
  - "Service dependency discovery: Consumer restart failures highlight need for AGT-MANAGER-1 enhancement"
  - "Docker cleanup completed: Legacy containers removed (mem0-postgres, mem0-qdrant, postgres)"
  - "Portainer password recovery: Official reset procedure executed successfully"
  - "Transformers container analysis: Containerized approach confirmed optimal for isolation"
  - "COMPLETE: AGT-STACK-1 operational for container orchestration and profile management"
  - "Stack Agent Implementation: Docker Compose profile management with Redis pub/sub integration"
  - "Profile Operations: start_profile, stop_profile, profile_status, list_profiles, container_status"
  - "Container Discovery: Automatic detection of running containers and profile mapping"
  - "ClickHouse Consumer Integration: Redis-based requests to AGT-STACK-1 for analytics startup"
  - "Ephemeral Resource Management: On-demand container startup/shutdown for resource efficiency"
  - "COMPLETE: Redis Consumer Flow Testing - R→C and R→W/N pipelines verified operational"
  - "Stream Processing Verification: Both consumer groups processing 11+ entries with zero lag"
  - "Apollo Conversation Logging Clarified: Already using Redis streams correctly via XAdd"
  - "Semantic Naming Consistency: ClickHouse conversations inherit semantic processing from unified pipeline"
  - "Container Orchestration Integration: AGT-STACK-1 ready for ClickHouse ephemeral startup requests"
  - "COMPLETE: AGT-MANAGER-1 enhanced with comprehensive service dependency tracking and automatic recovery"
  - "Service Dependency Architecture: Infrastructure, Agent, and Container dependency validation with retry logic"
  - "Dependency-Aware Restarts: Pre-start validation prevents agents from starting without required services"
  - "Automatic Recovery Enhancement: Persistent agents auto-restart only after dependency validation"
  - "Health Validation System: On-demand service health checks with affected agent analysis"
  - "Registry Enhancement: All core agents now have dependency definitions (Redis, Weaviate, Docker, agent dependencies)"

architectural_insights:
  - "Multi-tenancy: Single-agent pool with project-aware routing > multiple instances"
  - "Resource efficiency: One AGT-NAMING-1 can handle 10+ projects via namespacing"
  - "Performance trade-off: Minimal routing overhead vs N×agents memory consumption"
  - "Collision prevention: Critical for port conflicts and resource contention"
  - "RESOLVED: Semantic gap - All namespaces now use semantic CIDs via AGT-NAMING-1"
  - "Agent lifecycle: Persistent (core services) vs Ephemeral (task-specific) classification"
  - "Memory-first state management: Fast active agent tracking with Redis backup for recovery"
  - "Data lifecycle: TTL policies vary by namespace - semantic names permanent, sessions 24hr"
  - "Service discovery architecture: Well-known manager endpoint (8380) → dynamic gateway discovery"
  - "External service bootstrap: Single discovery endpoint solves Chrome plugin / web UI integration"
  - "Universal Agent Platform foundation: Ready for SFTP, web search, Puppeteer, S3, system agents"
  - "Unified Conversation Pipeline: All conversation sources (Apollo + Claude Code) → single Redis stream → dual consumers"
  - "Semantic Consistency: ClickHouse analytics inherit semantic naming from W/N pipeline processing"
  - "Container Orchestration Architecture: Profile-based ephemeral containers with intelligent startup/shutdown"
  - "Service Dependency Management: Comprehensive dependency tracking with infrastructure/agent/container validation"
  - "Resilient Agent Architecture: Dependency-aware restarts prevent cascade failures and improve system stability"

next_priorities:
  - implement_service_dependency_chain_management_with_ordered_startup
  - deploy_AGT-STACK-1_for_production_ephemeral_container_management
  - create_AGT-GRAPH-1_for_neo4j_relationships
  - implement_actual_W/N_clients_in_stream_processor
  - add_project_context_registration_to_AGT-MANAGER-1

# INFRASTRUCTURE STATUS  
active_databases:
  redis: "mem0-redis:6380 - agent pub/sub + streams + future session management"
  weaviate: "centerfire-weaviate:8080 - semantic storage with namespaces (AGT-SEMANTIC-1 active)"
  neo4j: "centerfire-neo4j:7474/7687 - graph relationships (awaiting AGT-GRAPH-1)"
  clickhouse: "centerfire-clickhouse:8123/9001 - cold storage analytics (profile: analytics, ephemeral)"
  
cleaned_containers: "mem0-postgres, mem0-qdrant, postgres, centerfire-cpp-dev - legacy containers removed"

# LEARNING PIPELINE ARCHITECTURE  
stream_flow: "Redis Streams → W/N + ClickHouse Consumers → Weaviate/Neo4j/ClickHouse (conversation capture + analytics)"
files_created: "/streams/producer/, /streams/weaviate-consumer/, /streams/neo4j-consumer/, /streams/clickhouse_consumer.go"
governance: "AGT-STREAM-MANAGER-1 monitors dedicated consumers (not agents)"
philosophy: "Agents MONITOR infrastructure, don't BECOME infrastructure"

# SESSION MANAGEMENT ARCHITECTURE
session_strategy: "Redis-based session management for Claude coding continuity"
namespaced_keys: "centerfire.dev.session:claude:TIMESTAMP, centerfire.dev.session:agent:ID:task"
use_cases: "post-compact recovery, multi-step task tracking, agent collaboration state"
future_agent: "AGT-SESSION-1 for session lifecycle management"

# CRITICAL REMINDERS FOR CLAUDE
claude_instructions: |
  ALWAYS read these files first in new sessions:
  1. This file (claude-agent-protocol.yaml) - Agent architecture and status
  2. DIR-SYS-1__genesis/semdoc-context-summary.md - SemDoc system overview
  
  AGENT DELEGATION (NEVER create directly):
  - Directories → AGT-STRUCT-1 (working)
  - Names → AGT-NAMING-1 (working, needs PROJECT.ENV.TYPE update)
  - Semantic analysis → AGT-SEMANTIC-1 (working with namespaces)
  - Code → AGT-CODING-1 (created)
  - Documentation → AGT-SEMDOC-1 (created) 
  - Graph relationships → AGT-GRAPH-1 (not created)
  - Project context/history → AGT-CONTEXT-1 (operational, use when needed)
  
  SYSTEM ARCHITECTURE:
  - Agent-oriented (not service-oriented) - everything flows through agents
  - Semantic namespacing: PROJECT.ENV.TYPE (centerfire.dev/test/prod)
  - Stream philosophy: agents MONITOR infrastructure, don't BECOME it
  - Working channels: agent.naming.request, agent.struct.request, agent.semantic.request
  - SemDoc: AI manufacturing infrastructure with behavioral contracts (see summary file)
  
  AUTO-READ HOOK INSTALLED: Future sessions will see reminder to read both files

# SESSION RECOVERY  
steps: "Read directives → Check agent status → Start agents → Test communication"